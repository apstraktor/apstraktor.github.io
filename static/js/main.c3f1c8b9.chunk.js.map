{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["am4core","am4themes_animated","App","chart","am4charts","paddingRight","data","visits","i","Math","round","random","push","date","Date","name","value","xAxes","renderer","grid","template","location","valueAxis","yAxes","tooltip","disabled","minWidth","series","dataFields","dateX","valueY","tooltipText","cursor","scrollbarX","this","dispose","id","style","width","height","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWAMAA,IAAiBC,K,IAmDFC,E,4LA/CX,IAAIC,EAAQH,IAAe,WAAYI,KAEvCD,EAAME,aAAe,GAIrB,IAFA,IAAIC,EAAO,GACPC,EAAS,GACJC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,GAAUE,KAAKC,OAAOD,KAAKE,SAAW,GAAM,GAAK,GAAKF,KAAKE,SAAW,IACtEL,EAAKM,KAAK,CAAEC,KAAM,IAAIC,KAAK,KAAM,EAAGN,GAAIO,KAAM,OAASP,EAAGQ,MAAOT,IAGnEJ,EAAMG,KAAOA,EAEEH,EAAMc,MAAML,KAAK,IAAIR,KAC3Bc,SAASC,KAAKC,SAASC,SAAW,EAE3C,IAAIC,EAAYnB,EAAMoB,MAAMX,KAAK,IAAIR,KACrCkB,EAAUE,QAAQC,UAAW,EAC7BH,EAAUJ,SAASQ,SAAW,GAE9B,IAAIC,EAASxB,EAAMwB,OAAOf,KAAK,IAAIR,KACnCuB,EAAOC,WAAWC,MAAQ,OAC1BF,EAAOC,WAAWE,OAAS,QAE3BH,EAAOI,YAAc,iBACrB5B,EAAM6B,OAAS,IAAI5B,IAEnB,IAAI6B,EAAa,IAAI7B,IACrB6B,EAAWN,OAAOf,KAAKe,GACvBxB,EAAM8B,WAAaA,EAEnBC,KAAK/B,MAAQA,I,6CAIT+B,KAAK/B,OACP+B,KAAK/B,MAAMgC,Y,+BAKb,OACI,yBAAKC,GAAG,WAAWC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,e,GA5CzCC,aCIEC,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c3f1c8b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nclass App extends Component {\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n\n    chart.paddingRight = 20;\n\n    let data = [];\n    let visits = 10;\n    for (let i = 1; i < 366; i++) {\n      visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n      data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\n    }\n\n    chart.data = data;\n\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    chart.scrollbarX = scrollbarX;\n\n    this.chart = chart;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return (\n        <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}